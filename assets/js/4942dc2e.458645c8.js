"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2340],{3990:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"testing-and-troubleshooting/database-tables","title":"Important Database Tables","description":"Structure","source":"@site/docs/testing-and-troubleshooting/database-tables.mdx","sourceDirName":"testing-and-troubleshooting","slug":"/testing-and-troubleshooting/database-tables","permalink":"/afex-docs/docs/testing-and-troubleshooting/database-tables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Important Database Tables"},"sidebar":"tutorialSidebar","previous":{"title":"Common Database Queries","permalink":"/afex-docs/docs/testing-and-troubleshooting/common-db-queries"},"next":{"title":"Important Views","permalink":"/afex-docs/docs/testing-and-troubleshooting/important-views"}}');var r=n(4848),t=n(8453);const l={sidebar_position:2,title:"Important Database Tables"},o=void 0,d={},a=[{value:"Structure",id:"structure",level:2},{value:"SIF Tables",id:"sif-tables",level:3},{value:"Fund Tables",id:"fund-tables",level:3},{value:"FTS Tables",id:"fts-tables",level:3},{value:"PAF Tables",id:"paf-tables",level:3},{value:"PRC Tables",id:"prc-tables",level:3},{value:"Load Tables",id:"load-tables",level:3},{value:"Salary Withdrawal Tables",id:"salary-withdrawal-tables",level:3},{value:"Pricing Setup Tables",id:"pricing-setup-tables",level:3},{value:"Non WPS Tables",id:"non-wps-tables",level:3},{value:"DCR Tables",id:"dcr-tables",level:3},{value:"DIF Tables",id:"dif-tables",level:3},{value:"Refund Tables",id:"refund-tables",level:3},{value:"JV Tables",id:"jv-tables",level:3},{value:"MOHRE Tables",id:"mohre-tables",level:3},{value:"Other Tables",id:"other-tables",level:3}];function c(e){const s={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(s.p,{children:"Most of the WPS Tables have structure as below as per feature:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Parent Table"})," > ",(0,r.jsx)(s.strong,{children:"Child Table"})," (to store details of parent), ",(0,r.jsx)(s.strong,{children:"Status Log"}),", ",(0,r.jsx)(s.strong,{children:"Document table"})," (to store all documents related to that feature), ",(0,r.jsx)(s.strong,{children:"Mapping Table"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"sif-tables",children:"SIF Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_MASTER"}),": Parent table to store header details of SIF."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_DETAILS"}),": Details of each SIF (its employees)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_DOCUMENT"}),": All kind of SIF Document path link with its type (ACK/NAK/EXCEL)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_STATUS_LOGS"}),": Status history of each SIF."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_ERROR_DETAILS"}),": Stores NAK errors with error messages, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id (whole SIF), otherwise error is on detail id (some employee)."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fund-tables",children:"Fund Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FUND"}),": Parent table to store header details of Fund."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SIF_FUND_DETAILS"}),": All types of fund details store here (not only SIF, don't be confused with the name). This is always one to one relation with fund. Stores break down of each amount in a fund (how much VAT, commission fee etc)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FUND_PAYMENT_DETAILS"}),": Fund table stores only cash, cheque, and OT amount. This table stores details of each funding like payment date, cheque number etc. Details filled in this table for cheque and OT when filled in link credit screen in Link Transaction."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FUND_STATUS_LOGS"}),": Status history of each fund."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FAT_FUND_DETAILS"}),": When a FAT funding created against a SIF, its data falls in Fund table and FAT fund details table (acting as FAT request table)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_FUND_MAPPING"}),": Stores Funds and associated PAFs for PAF funding."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NON_WPS_FUND_MAPPING"}),": Non-WPS funds and associated Non-WPS files id for Non-WPS funding."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"RFR_FUND_MAPPING"}),": RFR funds and associated RFR id for RFR funding."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"CUSTOMER_REGISTRATION_FUND_MAPPING"}),": Includes fund details of customer registration."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"EMPLOYEE_STATEMENT_FUND_MAPPING"}),": Statement fee fund and associated customer id of employee for statement fee funding."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NEGATIVE_COMMISSION_FUND_MAPPING"}),": Fund and associated negative commissions."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"CARD_ISSUENACE_FUND_MAPPING"})," & ",(0,r.jsx)(s.strong,{children:"EMPLOYEE_CARD_ISSUEANCE_FUND_MAPPING"}),": Both tables store one kind of fund (card issuance fund) but in a different way. ",(0,r.jsx)(s.em,{children:"CARD_ISSUEANCE_FUND_MAPPING"})," stores fund against corporates and ",(0,r.jsx)(s.em,{children:"EMPLOYEE_CARD_ISSUEANCE_FUND_MAPPING"})," stores fund and associated employees for whom fee is paid."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FUND_CANCELLATION_REQUEST"}),": Stores fund cancel request and its approval details. The request to cancel a fund can be generated many time that's why it is a one to many separate table."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NEGATIVE_COMMISSION_REQUEST"}),": Table stores details of commission amount to be added in invoice in case in invoice customer."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"INVOICE_NEGATIVE_COMMISSION_MAPPING"}),": Table stores mapping of negative commission request with an invoice based on invoice tenure on which request falls. This mapping helps custoemr knowing all of its invoices and its associated commissions."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"fts-tables",children:"FTS Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_FTS"}),": Parent or header information of FTS."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_FTS_DOCUMENT"}),": Stores all fts document path and with types (ACK/NAK)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FTS_ALLOCATION"}),": Stores the request to add the FTS limit and its approval."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FTS_ALLOCATION_UTILIZATION"}),": Stores utilized amount, remaining balance of each day."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FTS_STATUS_LOG"}),": Stores status history."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_FTS_FUND_MAPPING"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FTS_FUND_SEQUENCE_MAPPING"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"FTS_ERROR_DETAILS"}),": Stores NAK errors with error messgae, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id, otherwise error is on detail id, same as SIF."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"paf-tables",children:"PAF Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF"}),": Stores parent information of the coming PAF."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_DOCUMENT"}),": Stores PAF doc S3 bucket link."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_DETAILS"}),": Stores details with in each PAF."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_STATUS_LOG"}),": PAF status history."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_DETAIL_UTILIZATION"}),": Stores how much amount is withdrawn / utilized from a particular paf detail."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"prc-tables",children:"PRC Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PRC"}),": Stores parent information of the coming PRC."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PRC_DOCUMENT"}),": Stores PRC doc S3 bucket link and doc types (ACK, NAK)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PRC_DETAILS"}),": Stores details with in each PRC."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PRC_STATUS_LOG"}),": PRC status history"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PAF_PRC_SEQUENCE_MAPPING"}),": Stores PAF info send in a PRC as 1 PRC contains confirmation of many PAFs."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"PRC_ERROR_DETAILS"}),": Stores NAK errors with error messgae, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id, otherwise error is on detail id"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"load-tables",children:"Load Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LOAD"}),": Stores parent information of the sending Load."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LOAD_DOCUMENT"}),": Stores Load doc S3 bucket link and doc types (Rf1,Rj1)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LOAD_DETAILS"})," - Stores details with in each Load."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LOAD_STATUS_LOG"}),": Load status history."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LOAD_ERROR_DETAILS"}),": Stores NAK errors with error messgae, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id, otherwise error is on detail id."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"salary-withdrawal-tables",children:"Salary Withdrawal Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SALARY_WITHDRAWAL"}),": Stores withdrawal information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SALARY_WITHDRAWAL_DOCUMENT"}),": Stores receipt doc link which branch user uploaded after successful withdrawal."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SALARY_WITHDRAWAL_YCS_RESPONSE"}),": To be Added"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SALARY_WITHDRAWAL_YCS_ERROR_RESPONSE"}),": To be Added"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"pricing-setup-tables",children:"Pricing Setup Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_PRICING_PACKAGE_SETUP"}),": Stores parent information of a pricing package."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_PRICING_DETAILS"}),": Stores detail level info of each package."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"non-wps-tables",children:"Non WPS Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NON_WPS_DISBURSEMENT_MASTER"}),": Stores parent info of non wps file."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NON_WPS_DISBURSEMENT_DOCUMENT"}),": Stores non wps excel file S3 link."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NON_WPS_DISBURSEMENT_DETAILS"}),": Details within each non wps file."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"NON_WPS_DISBURSEMENT_STATUS_LOG"}),": Status history logs"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"dcr-tables",children:"DCR Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR"}),": Stores DCR parent level Info"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_DETAILS"}),": Stores DCR detail level info."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_DETAILS_ATTACHMENT"}),": Stores any document against each detail if uploaded from screen."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_DOCUMENT"}),": Stores DCR doc its ack, nak info with S3 path."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_STATUS_LOGS"}),": Status history."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_ERROR_DETAILS"}),": Stores NAK errors with error messgae, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id, otherwise error is on detail id."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DCR_LOAD_MAPPING"}),": TODO"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"dif-tables",children:"DIF Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DIF"}),": Stores DIF file parent level Info."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DIF_DETAILS"}),": Stores Dif detail level info."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DIF_DOCUMENT"}),": Stores Dif doc its ack, nak info with S3 path."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DIF_STATUS_LOGS"}),": Status history."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"DIF_ERROR_DETAILS"}),": Stores NAK errors with error messgae, parent id and detail id. Parent id is mandatory. if detail id is null, it means error is on parent id, otherwise error is on detail id."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"refund-tables",children:"Refund Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"REFUND_REQUEST"}),": When refund is requested via credit, the request goes into this table . Stores all kinds of refund request."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"REFUND_RECEIPT_DOCUMENT"}),": Stores the receipt path both in case of card or credit refund"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"RFR/RSU/RRI/RTC/RRR/RFA"}),": All tables habe same structure parent, details child, document, status log , error details. The other involving tables among these are (to be added later):"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"RSU_RFR_MAPPING"}),"\r\n",(0,r.jsx)(s.code,{children:"RRR_RRI_DETAIL_MAPPING"}),"\r\n",(0,r.jsx)(s.code,{children:"RRI_UNLOAD"}),"\r\n",(0,r.jsx)(s.code,{children:"SIF_RTC_MAPPING"})]}),"\n",(0,r.jsx)(s.h3,{id:"jv-tables",children:"JV Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"JOURNAL_VOUCHER"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"JOURNAL_VOUCHER_DETAILS"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"JOURNAL_VOUCHER_HEADER"}),": TODO"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"mohre-tables",children:"MOHRE Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_STATUS_INQUIRY"}),": To store response of Usecase 7"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"KAFKA_LOGGINGS"}),": Stores each request and response of MOHRE."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"COMPANY_MOHRE"}),": Every time when mohre usecase 1 hits (check registration) for a company, this tables filled with the companies coming in response."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"OWNER_MOHRE"}),": Every time when mohre usecase 1 hits (check registration) for a domestic, this tables filled with the response."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"other-tables",children:"Other Tables"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_LOOKUP"}),": Store all the lookups for WPS. IS_USER_EDITABLE is the column that describe the lookup is configurable of not. ATTRIBUTE2 stores editable lookup input type (helpful for FE validations)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"WPS_COMPLIANCE"}),": Those sif details that violated compliance rules falls in this table. (Ticket: AUS-2663: WPS -Compliance Rules Reopened)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"EMPLOYEE_TRANSACTIONS"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"YCS_CBUAE_REJECT_CODE_MAPPING"}),": TODO"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"YCS_CBUAE_CODE_MAPPING"}),": TODO"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var i=n(6540);const r={},t=i.createContext(r);function l(e){const s=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);